import antlr4 from 'antlr4'
import ParserRuleContext = antlr4.ParserRuleContext
import Token = antlr4.Token
import TerminalNode = antlr4.tree.TerminalNode
<%_ _.each(imports, (p) => { %>
import <%= p %> from './<%= p %>'
<% }) %>

declare namespace <%= className %> {
  <%_ _.each(contextRules, (contextRule) => { %>
  class <%= contextRule.name %> extends <%= contextRule.superName %> {
  <% _.each(contextRule.members, (member) => { %>
  <%_ if (member.type === 'method') { _%>
    <%= member.name %><%- member.genericType %>(<%= member.args %>): <%= member.returnType %>
  <%_ } else { _%>
    readonly <%= member.name %>: <%= member.returnType %>
  <%_ } _%>
  <% }) %>
  }
  <% }) %>
}

declare class <%= className %> extends antlr4.Parser {
  readonly grammarFileName: string
  readonly ruleNames: string[]
  readonly literalNames: string[]
  readonly symbolicNames: string[]

  static grammarFileName: string
  static readonly ruleNames: string[]
  static readonly literalNames: string[]
  static readonly symbolicNames: string[]

  constructor(input: antlr4.CommonTokenStream)
    <%_ _.each(symbolicNames, (sym) => { %>
    static readonly <%= sym %>: number
    <%_ }) %>
    <%_ _.each(ruleNames, (rule) => { %>
    static readonly RULE_<%= rule %>: number
    <%_ }) %>
    <%_ _.each(methods, (method) => { %>
    <%= method.name %>(<%= method.args %>): <%= className %>.<%= method.type %>
    <%_ }) %>
}

export default <%= className %>